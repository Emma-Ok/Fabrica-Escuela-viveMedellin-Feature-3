name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN:     ${{ secrets.VERCEL_TOKEN }}

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js (v20) and cache npm
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Packages/frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci --prefix Packages/frontend
        # npm ci --prefix instala en subcarpeta sin cambiar de cwd :contentReference[oaicite:4]{index=4}

      - name: Install Vercel CLI globally
        run: npm install --global vercel@latest

      - name: Pull env vars from Vercel
        run: vercel pull --yes \
              --environment=production \
              --token=${{ secrets.VERCEL_TOKEN }} \
              Packages/frontend
        # especificamos la carpeta como argumento para que CLI sólo busque ahí :contentReference[oaicite:5]{index=5}

      - name: Build frontend
        run: vercel build \
              --prod \
              --token=${{ secrets.VERCEL_TOKEN }} \
              Packages/frontend
        # igual: build desde root apuntando a Packages/frontend :contentReference[oaicite:6]{index=6}

      - name: Deploy frontend a Vercel
        run: vercel deploy \
              --prebuilt \
              --prod \
              --token=${{ secrets.VERCEL_TOKEN }} \
              Packages/frontend
        # deploy prebuilt desde root especificando ruta :contentReference[oaicite:7]{index=7}

  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java (Temurin 21)
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Verify backend directory exists
        run: |
          if [ ! -d "Packages/backend" ]; then
            echo "❌ El directorio Packages/backend no existe"
            exit 1
          fi

      - name: Build backend con Maven
        working-directory: Packages/backend
        run: mvn clean install
